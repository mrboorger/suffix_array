void suffix_array(const string& s)
{
    //preprocessing
    s += char(96);
    fill(cnt, cnt + alph, 0);
    int n = int(s.size());
    for(char ch : s)
        cnt[int(ch - 96)]++;
    for(int i = 1; i < alph; ++i)
        cnt[i] += cnt[i - 1];
    for(int i = 0; i < n; ++i)
        p[--cnt[int(s[i] - 96)]] = i;
    c[p[0]] = 0;
    for(int i = 1; i < n; ++i)
        c[p[i]] = c[p[i - 1]] + int(s[p[i]] > s[p[i - 1]]);

    //main
    for(int len = 1; len < n; len *= 2)
    {
        for(int i = 0; i < n; ++i)
            pn[i] = (p[i] - len + n) % n;
        fill(cnt, cnt + n, 0);
        for(int i = 0; i < n; ++i)
            cnt[c[i]]++;
        for(int i = 1; i < n; ++i)
            cnt[i] += cnt[i - 1];
        for(int i = n - 1; i >= 0; --i)
            p[--cnt[c[pn[i]]]] = pn[i];
        cn[p[0]] = 0;
        for(int i = 1; i < n; ++i)
            cn[p[i]] = cn[p[i - 1]] + int(c[p[i]] > c[p[i - 1]] ||
                                          c[(p[i] + len) % n] > c[(p[i - 1] + len) % n]);
        for(int i = 0; i < n; ++i)
            c[i] = cn[i];
    }

    for(int i = 0; i < n; ++i)
        pos[p[i]] = i;
    int cur = 0;
    for(int i = 0; i < n; ++i)
    {
        if (pos[i] > 0)
        {
            while(s[i + cur] == s[p[pos[i] - 1] + cur]) ++cur;
            lcp[pos[i] - 1] = cur;
            cur = max(cur - 1, 0);
        }
    }
    return;
}
